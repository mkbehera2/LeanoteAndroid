package com.tsy.leanote.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tsy.leanote.feature.note.bean.Note;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTE".
*/
public class NoteDao extends AbstractDao<Note, Long> {

    public static final String TABLENAME = "NOTE";

    /**
     * Properties of entity Note.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Noteid = new Property(1, String.class, "noteid", false, "NOTEID");
        public final static Property Notebookid = new Property(2, String.class, "notebookid", false, "NOTEBOOKID");
        public final static Property Uid = new Property(3, String.class, "uid", false, "UID");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(5, String.class, "content", false, "CONTENT");
        public final static Property Is_markdown = new Property(6, boolean.class, "is_markdown", false, "IS_MARKDOWN");
        public final static Property Is_blog = new Property(7, boolean.class, "is_blog", false, "IS_BLOG");
        public final static Property Is_trash = new Property(8, boolean.class, "is_trash", false, "IS_TRASH");
        public final static Property Created_time = new Property(9, String.class, "created_time", false, "CREATED_TIME");
        public final static Property Updated_time = new Property(10, String.class, "updated_time", false, "UPDATED_TIME");
        public final static Property Public_time = new Property(11, String.class, "public_time", false, "PUBLIC_TIME");
        public final static Property Usn = new Property(12, int.class, "usn", false, "USN");
    }


    public NoteDao(DaoConfig config) {
        super(config);
    }
    
    public NoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NOTEID\" TEXT UNIQUE ," + // 1: noteid
                "\"NOTEBOOKID\" TEXT," + // 2: notebookid
                "\"UID\" TEXT," + // 3: uid
                "\"TITLE\" TEXT," + // 4: title
                "\"CONTENT\" TEXT," + // 5: content
                "\"IS_MARKDOWN\" INTEGER NOT NULL ," + // 6: is_markdown
                "\"IS_BLOG\" INTEGER NOT NULL ," + // 7: is_blog
                "\"IS_TRASH\" INTEGER NOT NULL ," + // 8: is_trash
                "\"CREATED_TIME\" TEXT," + // 9: created_time
                "\"UPDATED_TIME\" TEXT," + // 10: updated_time
                "\"PUBLIC_TIME\" TEXT," + // 11: public_time
                "\"USN\" INTEGER NOT NULL );"); // 12: usn
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Note entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String noteid = entity.getNoteid();
        if (noteid != null) {
            stmt.bindString(2, noteid);
        }
 
        String notebookid = entity.getNotebookid();
        if (notebookid != null) {
            stmt.bindString(3, notebookid);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(4, uid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
        stmt.bindLong(7, entity.getIs_markdown() ? 1L: 0L);
        stmt.bindLong(8, entity.getIs_blog() ? 1L: 0L);
        stmt.bindLong(9, entity.getIs_trash() ? 1L: 0L);
 
        String created_time = entity.getCreated_time();
        if (created_time != null) {
            stmt.bindString(10, created_time);
        }
 
        String updated_time = entity.getUpdated_time();
        if (updated_time != null) {
            stmt.bindString(11, updated_time);
        }
 
        String public_time = entity.getPublic_time();
        if (public_time != null) {
            stmt.bindString(12, public_time);
        }
        stmt.bindLong(13, entity.getUsn());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Note entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String noteid = entity.getNoteid();
        if (noteid != null) {
            stmt.bindString(2, noteid);
        }
 
        String notebookid = entity.getNotebookid();
        if (notebookid != null) {
            stmt.bindString(3, notebookid);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(4, uid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
        stmt.bindLong(7, entity.getIs_markdown() ? 1L: 0L);
        stmt.bindLong(8, entity.getIs_blog() ? 1L: 0L);
        stmt.bindLong(9, entity.getIs_trash() ? 1L: 0L);
 
        String created_time = entity.getCreated_time();
        if (created_time != null) {
            stmt.bindString(10, created_time);
        }
 
        String updated_time = entity.getUpdated_time();
        if (updated_time != null) {
            stmt.bindString(11, updated_time);
        }
 
        String public_time = entity.getPublic_time();
        if (public_time != null) {
            stmt.bindString(12, public_time);
        }
        stmt.bindLong(13, entity.getUsn());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Note readEntity(Cursor cursor, int offset) {
        Note entity = new Note( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // noteid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // notebookid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // uid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // content
            cursor.getShort(offset + 6) != 0, // is_markdown
            cursor.getShort(offset + 7) != 0, // is_blog
            cursor.getShort(offset + 8) != 0, // is_trash
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // created_time
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // updated_time
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // public_time
            cursor.getInt(offset + 12) // usn
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Note entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNoteid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNotebookid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIs_markdown(cursor.getShort(offset + 6) != 0);
        entity.setIs_blog(cursor.getShort(offset + 7) != 0);
        entity.setIs_trash(cursor.getShort(offset + 8) != 0);
        entity.setCreated_time(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUpdated_time(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPublic_time(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUsn(cursor.getInt(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Note entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Note entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Note entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
